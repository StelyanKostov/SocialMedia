@model List<SocialMedia.ViewModels.Chat.RealTimeChatViewModel>
@*@{ this.ViewBag.Title = "Chat"; }*@

@*<h1>@this.ViewBag.Title</h1>*@

<style>
    .under {
        position: absolute;
        bottom: 200px;
        right: 200px;
    }

    .containerr {
        position: fixed;
        bottom: 0;
        right: 0;
        pointer-events: none;
    }

    .chat {
        border: 1px solid #999;
        display: inline-block;
        vertical-align: bottom;
        position: relative;
        margin: 0 5px;
        pointer-events: auto;
        background: #fff;
        height: 300px;
        width: 350px;
        border: 1px solid #ACD8F0;
        overflow-x: auto;
        white-space: nowrap;
    }

    .title {
        padding: 0.5em;
        background-color: blue;
        color: white;
    }

    .text {
        padding: 10px;
    }
</style>

@if (Model != null)
{

    <div class="containerr">

        @foreach (var item in Model)
        {
            <div class="chat">
                <div class="title">@item.WithProfilUserName</div>
                <div class="text messagesList" id="@item.WithProfilUserName">
                    @foreach (var item2 in item.Messages)
                    {
                        <p>@item2.Content</p>
                    }

                </div>
                <div class="chatbox">
                    <input type="hidden" name="name" value="@item.WithProfilId" class="profilId" />
                    <input type="text" class="messageInput" />
                    <button class="sendButton">Send</button>
                </div>
            </div>

        }
    </div>
}


    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>

    <script>
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatter")
            .build();


        connection.on("NewMessage",
            function (message) {
                var chatInfo = `<p>[${message.user}] ${escapeHtml(message.text)}</p>`;

                $(`#${message.user}`).append(chatInfo);
            });

        /* $(".sendButton").click(function (event) {*/

        document.querySelectorAll('.sendButton').forEach(x => x.addEventListener('click', function (event) {

            console.log(event.target)
            var message = event.currentTarget.parentElement.getElementsByClassName('messageInput')[0].value;
            console.log(message)
            var recipientProfilId = event.currentTarget.parentElement.getElementsByClassName('profilId')[0].value;
            console.log(recipientProfilId)


            //todoo
            let element = event.currentTarget.parentElement.parentElement.getElementsByClassName('messagesList')[0];

            console.log(element)

            let pElement = document.createElement("p");
            pElement.innerHTML = `[me] ${escapeHtml(message)}`
            element.appendChild(pElement);


            var data = message + '<>=!' + recipientProfilId;
            connection.invoke("SendToOneProfil", data);
            $(".messageInput").val("");
        }));

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
    </script>
