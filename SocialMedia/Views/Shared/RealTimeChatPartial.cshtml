@model List<SocialMedia.ViewModels.Chat.RealTimeChatViewModel>
@*@{ this.ViewBag.Title = "Chat"; }*@

@*<h1>@this.ViewBag.Title</h1>*@

<style>
    .under {
        position: absolute;
        bottom: 200px;
        right: 200px;
    }

    .containerr {
        position: fixed;
        bottom: 0;
        right: 0;
        /*pointer-events: none;*/
    }

    .chat {
        border: 1px solid #999;
        display: inline-block;
        vertical-align: bottom;
        position: relative;
        margin: 0 5px;
        pointer-events: auto;
        background: #fff;
        height: 350px;
        width: 400px;
        border: 1px solid #ACD8F0;
        overflow-x: auto;
        white-space: nowrap;
        position: relative;
        bottom: 0;
    }

    .title {
        padding: 0.5em;
        background-color: royalblue;
        color: white;
    }

    .text {
        padding: 10px;
        overflow: auto;
        bottom: 0;
        max-height: 200px;
        position: relative;
        width: 100%;
    }

    .chatbox {
        bottom: 0;
        position: fixed;
    }

    .messagesList {
    }
</style>


@if (Model != null)
{


    <div class="containerr">

        @foreach (var item in Model)
        {



            <label class="popUpChat btn btn-primary">
                <span class="badge">@item.Messages.Count(x => !x.Seen)</span>
                @item.WithProfilUserName
            </label>
            <div class="chat" style="display:none">
                <div class="title ">@item.WithProfilUserName <i class="far fa-trash-alt removeIcon" style="margin-left:2em"></i></div>
                <div class="text messagesList" id="@item.WithProfilUserName">

                    @foreach (var item2 in item.Messages)
                    {
                        <p>@item2.Content [@item2.CreateOn]</p>


                    }


                </div>
                <div class="chatbox">
                    <nav>
                        <div class="input-group-append">
                            <input type="hidden" name="name" value="@item.WithProfilId" class="profilId" />
                            <input type="text" class="messageInput form-control" />

                            <button class="sendButton btn btn-primary">Send</button>
                        </div>

                    </nav>

                </div>
            </div>


        }
    </div>
}

<script>

    let element = document.querySelectorAll('.removeIcon').forEach(x => x.addEventListener('click', function (e) {

        console.log(e.currentTarget.parentElement.parentElement.previousSibling.previousSibling)
        console.log(e.currentTarget.parentElement.parentElement)

        e.currentTarget.parentElement.parentElement.previousSibling.previousSibling.remove();



        e.currentTarget.parentElement.parentElement.remove()

    }))
    /* window.scroll(0, 10000)*/

    /* eee.scroll(0, 1999)*/
</script>


<script>
    let elements = document.querySelectorAll('.popUpChat').forEach(x => x.addEventListener('click', function (e) {



        let divChat = e.currentTarget.nextSibling.nextSibling;
        divChat.style.display = "";

        var id = divChat.getElementsByClassName('profilId')[0].value;

        console.log(id)
        fetch(`RealTimeChat/SeenMessages?id2=${id}`,
            {
                method: 'GET',
                headers: {
                    'Accept': 'application/json; charset=utf-8',
                    'Content-Type': 'application/json;charset=UTF-8'
                },
                /*body: JSON.stringify(id)*/
            })
            .then(x => x.json())
            .then(x => {

                
            })

        e.currentTarget.getElementsByClassName('badge')[0].innerHTML = 0;

        


        var mlForScroll = divChat.getElementsByClassName('messagesList')[0];

        mlForScroll.scrollTop = mlForScroll.scrollHeight;

        let labelPopUp = e.currentTarget;
        labelPopUp.style.display = "none";

        divChat.getElementsByClassName('title')[0].addEventListener('click', function (e) {


            e.currentTarget.parentElement.style.display = 'none';

            labelPopUp.style.display = '';
        })

    }));

</script>
<script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
<script>
    var connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatter")
        .build();


    connection.on("NewMessage",
        function (message) {
            var chatInfo = `<p>[${message.user}] ${escapeHtml(message.text)}</p>`;

            $(`#${message.user}`).append(chatInfo);

            let element = document.getElementById(message.user);
            element.scrollTop = element.scrollHeight;
        });


    document.querySelectorAll('.sendButton').forEach(x => x.addEventListener('click', function (event) {

        var message = event.currentTarget.parentElement.getElementsByClassName('messageInput')[0].value;

        var recipientProfilId = event.currentTarget.parentElement.getElementsByClassName('profilId')[0].value;

        //todoo
        let elementMessagesList = event.currentTarget.parentElement.parentElement.parentElement.parentElement.getElementsByClassName('messagesList')[0];


        let pElement = document.createElement("p");
        pElement.innerHTML = `[me] ${escapeHtml(message)}`
        elementMessagesList.appendChild(pElement);


        var data = message + '<>=!' + recipientProfilId;
        connection.invoke("SendToOneProfil", data);
        $(".messageInput").val("");

        elementMessagesList.scrollTop = elementMessagesList.scrollHeight;

    }));

    connection.start().catch(function (err) {
        return console.error(err.toString());
    });

    function escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
</script>
